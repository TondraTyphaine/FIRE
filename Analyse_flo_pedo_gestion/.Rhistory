)
## Pourcentages des types biologiques
data %>%
select(Therophyte_pourcentage, Geophyte_pourcentage, Hemicroptophyte_pourcentage, Chamephyte_pourcentage, lianescent_pourcentage, Phanerophyte_pourcentage, Helophyte_pourcentage)->
data_2
pairs.panels(data_2,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Epaisseur et nombre d'horizon et pourcentages des types biologiques
data %>%
select(-Sample,-Panels, -Late_mowing,-Dead_wood, -Cut, -Plantation, -Elagage, -ZNIEFF, -Leisure_facilities)->
data_3
cor_matrix <- cor(data_3, use = "complete.obs", method = "pearson")
library(ggplot2)
library(reshape2)  # Pour "melt" la matrice en format long
# Convertir la matrice de corrélation en format long
cor_melted <- melt(cor_matrix)
# Créer la heatmap avec ggplot2
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Heatmap de la matrice de corrélation")
## Variables de gestion
data %>%
select(Panels, Late_mowing,Dead_wood, Cut, Plantation, Elagage, ZNIEFF, Leisure_facilities) ->
data_4
library(corrplot)  # Pour la visualisation de corrélations
library(reshape2)  # Pour réorganiser les données si nécessaire
data %>%
select(-Sample)->
data_cor
data_cor
mixed_correlation <- function(data_cor) {
n <- ncol(data_cor)
cor_matrix_2 <- matrix(NA, n, n)
colnames(cor_matrix_2) <- colnames(data_cor)
rownames(cor_matrix_2) <- colnames(data_cor)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data[[i]]
y <- data[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
return(cor_matrix_2)
}
mixed_correlation
cor_matrix_2
mixed_correlation <- function(data_cor) {
n <- ncol(data_cor)
cor_matrix_2 <- matrix(NA, n, n)
colnames(cor_matrix_2) <- colnames(data_cor)
rownames(cor_matrix_2) <- colnames(data_cor)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data_cor[[i]]
y <- data_cor[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
return(cor_matrix_2)
}
# Calculer la matrice de corrélation mixte
cor_matrix_2 <- mixed_correlation(data_cor)
# Visualiser la heatmap des corrélations
corrplot(cor_matrix_2, method = "color", tl.col = "black",
tl.srt = 45, col = colorRampPalette(c("red", "white", "blue"))(200))
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data_cor[[i]]
y <- data_cor[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
mixed_correlation <- function(data_cor) {
n <- ncol(data_cor)
cor_matrix_2 <- matrix(NA, n, n)
colnames(cor_matrix_2) <- colnames(data_cor)
rownames(cor_matrix_2) <- colnames(data_cor)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data_cor[[i]]
y <- data_cor[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
return(cor_matrix_2)
}
# Calculer la matrice de corrélation mixte
cor_matrix_2 <- mixed_correlation(data_cor)
# Visualiser la heatmap des corrélations
corrplot(cor_matrix_2, method = "color", tl.col = "black",
tl.srt = 45, col = colorRampPalette(c("red", "white", "blue"))(200))
# Visualiser la heatmap des corrélations
corrplot(cor_matrix_2, method = "color", tl.col = "black",
tl.srt = 90, col = colorRampPalette(c("red", "white", "blue"))(200))
## Contribution des individus à chaque axe
contribution_individus <- acp$ind$contrib
## Graphique des individus avec la contribution à l'axe 1
plot(acp, choix = "ind", main = "Graphique des individus (ACP)")
contribution_individus
## Représentation
plot.PCA (acp, choix="ind", invisible="ind.sup")
## Graphique des individus avec la contribution à l'axe 1
plot(acp, choix = "ind", main = "Graphique des individus (ACP)")
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
## Représentation
plot.PCA (acp, choix="ind", invisible="ind.sup")
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
library(tidyverse)
data <- read_csv2("Data_flo_pedo_gestion.csv")
data
library(ade4)
library(psych)
# Draftsman plot et heatmap pour étudier les variables et leurs relations
## Epaisseur et nombre d'horizon
data %>%
select(Mean_horizon_nb, mean_O_thickness,mean_A_thickness, mean_T1_thickness,mean_T2_thickness, mean_J_thickness,mean_T3_thickness, Sand_pourcentage, Loam_pourcentage, Clay_pourcentage)->
data_1
pairs.panels(data_1,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Pourcentages des types biologiques
data %>%
select(Therophyte_pourcentage, Geophyte_pourcentage, Hemicroptophyte_pourcentage, Chamephyte_pourcentage, lianescent_pourcentage, Phanerophyte_pourcentage, Helophyte_pourcentage)->
data_2
pairs.panels(data_2,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Epaisseur et nombre d'horizon et pourcentages des types biologiques
data %>%
select(-Sample,-Panels, -Late_mowing,-Dead_wood, -Cut, -Plantation, -Elagage, -ZNIEFF, -Leisure_facilities)->
data_3
cor_matrix <- cor(data_3, use = "complete.obs", method = "pearson")
library(ggplot2)
library(reshape2)  # Pour "melt" la matrice en format long
# Convertir la matrice de corrélation en format long
cor_melted <- melt(cor_matrix)
# Créer la heatmap avec ggplot2
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Heatmap de la matrice de corrélation")
## Variables de gestion
data %>%
select(Panels, Late_mowing,Dead_wood, Cut, Plantation, Elagage, ZNIEFF, Leisure_facilities) ->
data_4
library(corrplot)  # Pour la visualisation de corrélations
data %>%
select(-Sample)->
data_cor
### Fonction pour créer matrice de corrélation
mixed_correlation <- function(data_cor) {
n <- ncol(data_cor)
cor_matrix_2 <- matrix(NA, n, n)
colnames(cor_matrix_2) <- colnames(data_cor)
rownames(cor_matrix_2) <- colnames(data_cor)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data_cor[[i]]
y <- data_cor[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
return(cor_matrix_2)
}
# Calculer la matrice de corrélation mixte
cor_matrix_2 <- mixed_correlation(data_cor)
# Visualiser la heatmap des corrélations
corrplot(cor_matrix_2, method = "color", tl.col = "black",
tl.srt = 90, col = colorRampPalette(c("red", "white", "blue"))(200))
# Pour ajouter les valeurs des coefficients de corrélations
#addCoef.col = "black"
library(tidyverse)
data <- read_csv2("Data_flo_pedo_gestion.csv")
data
library(ade4)
library(psych)
# Draftsman plot et heatmap pour étudier les variables et leurs relations
## Epaisseur et nombre d'horizon
data %>%
select(Mean_horizon_nb, mean_O_thickness,mean_A_thickness, mean_T1_thickness,mean_T2_thickness, mean_J_thickness,mean_T3_thickness, Sand_pourcentage, Loam_pourcentage, Clay_pourcentage)->
data_1
pairs.panels(data_1,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Pourcentages des types biologiques
data %>%
select(Therophyte_pourcentage, Geophyte_pourcentage, Hemicroptophyte_pourcentage, Chamephyte_pourcentage, lianescent_pourcentage, Phanerophyte_pourcentage, Helophyte_pourcentage)->
data_2
pairs.panels(data_2,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Epaisseur et nombre d'horizon et pourcentages des types biologiques
data %>%
select(-Sample,-Panels, -Late_mowing,-Dead_wood, -Cut, -Plantation, -Elagage, -ZNIEFF, -Leisure_facilities)->
data_3
cor_matrix <- cor(data_3, use = "complete.obs", method = "pearson")
library(ggplot2)
library(reshape2)  # Pour "melt" la matrice en format long
# Convertir la matrice de corrélation en format long
cor_melted <- melt(cor_matrix)
# Créer la heatmap avec ggplot2
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Heatmap de la matrice de corrélation")
## Variables de gestion
data %>%
select(Panels, Late_mowing,Dead_wood, Cut, Plantation, Elagage, ZNIEFF, Leisure_facilities) ->
data_4
library(corrplot)  # Pour la visualisation de corrélations
data %>%
select(-Sample)->
data_cor
### Fonction pour créer matrice de corrélation
mixed_correlation <- function(data_cor) {
n <- ncol(data_cor)
cor_matrix_2 <- matrix(NA, n, n)
colnames(cor_matrix_2) <- colnames(data_cor)
rownames(cor_matrix_2) <- colnames(data_cor)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data_cor[[i]]
y <- data_cor[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
return(cor_matrix_2)
}
# Calculer la matrice de corrélation mixte
cor_matrix_2 <- mixed_correlation(data_cor)
# Visualiser la heatmap des corrélations
corrplot(cor_matrix_2, method = "color", tl.col = "black",
tl.srt = 90, col = colorRampPalette(c("red", "white", "blue"))(200))
# Pour ajouter les valeurs des coefficients de corrélations
#addCoef.col = "black"
library(tidyverse)
data <- read_csv2("Data_flo_pedo_gestion.csv")
data
library(ade4)
library(psych)
# Draftsman plot et heatmap pour étudier les variables et leurs relations
## Epaisseur et nombre d'horizon
data %>%
select(Mean_horizon_nb, mean_O_thickness,mean_A_thickness, mean_T1_thickness,mean_T2_thickness, mean_J_thickness,mean_T3_thickness, Sand_pourcentage, Loam_pourcentage, Clay_pourcentage)->
data_1
pairs.panels(data_1,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Pourcentages des types biologiques
data %>%
select(Therophyte_pourcentage, Geophyte_pourcentage, Hemicroptophyte_pourcentage, Chamephyte_pourcentage, lianescent_pourcentage, Phanerophyte_pourcentage, Helophyte_pourcentage)->
data_2
pairs.panels(data_2,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
## Epaisseur et nombre d'horizon et pourcentages des types biologiques
data %>%
select(-Sample,-Panels, -Late_mowing,-Dead_wood, -Cut, -Plantation, -Elagage, -ZNIEFF, -Leisure_facilities)->
data_3
cor_matrix <- cor(data_3, use = "complete.obs", method = "pearson")
library(ggplot2)
library(reshape2)  # Pour "melt" la matrice en format long
# Convertir la matrice de corrélation en format long
cor_melted <- melt(cor_matrix)
# Créer la heatmap avec ggplot2
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Heatmap de la matrice de corrélation")
## Variables de gestion
data %>%
select(Panels, Late_mowing,Dead_wood, Cut, Plantation, Elagage, ZNIEFF, Leisure_facilities) ->
data_4
library(corrplot)  # Pour la visualisation de corrélations
data %>%
select(-Sample)->
data_cor
### Fonction pour créer matrice de corrélation
mixed_correlation <- function(data_cor) {
n <- ncol(data_cor)
cor_matrix_2 <- matrix(NA, n, n)
colnames(cor_matrix_2) <- colnames(data_cor)
rownames(cor_matrix_2) <- colnames(data_cor)
for (i in 1:n) {
for (j in 1:n) {
if (i == j) {
cor_matrix_2[i, j] <- 1  # Corrélation parfaite sur la diagonale
} else {
x <- data_cor[[i]]
y <- data_cor[[j]]
if (length(unique(x)) == 1 || length(unique(y)) == 1) {
# Si une variable est constante, assigner NA ou 0
cor_matrix_2[i, j] <- 0
} else if (is.numeric(x) && is.numeric(y)) {
# Corrélation Pearson pour deux quantitatives
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else if (all(x %in% c(0, 1)) && all(y %in% c(0, 1))) {
# Phi coefficient pour deux binaires
cor_matrix_2[i, j] <- cor(x, y, method = "pearson")
} else {
# Corrélation point-biserielle pour binaire et quantitative
cor_matrix_2[i, j] <- cor(as.numeric(x), as.numeric(y), method = "pearson")
}
}
}
}
return(cor_matrix_2)
}
# Calculer la matrice de corrélation mixte
cor_matrix_2 <- mixed_correlation(data_cor)
# Visualiser la heatmap des corrélations
corrplot(cor_matrix_2, method = "color", tl.col = "black",
tl.srt = 90, col = colorRampPalette(c("red", "white", "blue"))(200))
# Pour ajouter les valeurs des coefficients de corrélations
#addCoef.col = "black"
# Standardiser les variables quantitatives (seulement pour les variables quantitatives)
data_quantitative_scaled <- scale(data_3)  # Mise à l'échelle
# Concaténer les données binaires et quantitatives standardisées
data_scaled <- cbind(data_quantitative_scaled, data_4)
# Ajouter les noms des échantillons comme noms des lignes
rownames(data_scaled) <- data$Sample
# Supprimer la colonne "Sample" de data_scaled
data_scaled <- data_scaled[, !colnames(data_scaled) %in% "Sample"]
# Effectuer l'ACP
library(FactoMineR)
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Les axes
## Histogramme des valeurs propres
barplot(acp$eig[,1], main="valeurs propres", names.arg=paste("dim", 1:nrow(acp$eig)))
## Contribution des axes (composantes principales)
contribution_axes <- acp$eig
contribution_axes
## Graphique de la variance expliquée par chaque axe
barplot(contribution_axes[, 2], names.arg = 1:nrow(contribution_axes),
main = "Contributions des axes (Variance expliquée)",
xlab = "Axe", ylab = "Variance expliquée (%)",
col = "lightblue")
# Les variables
## Coordonnées variables
acp$svd$V
## Cercles des corrélations
plot.PCA (acp, choix="var", invisible="ind.sup")
## Matrice des corrélations entre les variables et les axes
acp$var$cor
## Contribution des variables aux axes
contribution_variables <- acp$var$contrib
head(contribution_variables)  # Afficher les premières lignes pour voir la structure
## Heatmap des contributions des variables
library(pheatmap)
pheatmap(contribution_variables, main = "Heatmap des contributions des variables",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
## Visualiser la qualité de la représentation des variables avec Cos2
library(factoextra)
cos2_var <- acp$var$cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
# Les individus
## Coordonnées
acp$svd$U
## Représentation
plot.PCA (acp, choix="ind", invisible="ind.sup")
## Contribution des individus à chaque axe
contribution_individus <- acp$ind$contrib
head(contribution_individus)  # Afficher les premières lignes pour voir la structure
## Graphique des individus avec la contribution à l'axe 1
plot(acp, choix = "ind", main = "Graphique des individus (ACP)")
## Visualiser les individus avec la qualité de la représentation sur les axes principaux
#install.packages("factoextra")
library(factoextra)
fviz_pca_ind(acp, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
## Qualité de la représentation des variables par les axes
cos2_individus <- acp$ind$cos2
## Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
# Visualiser l'ACP avec les noms des individus
fviz_pca_ind(acp,
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = FALSE,           # Eviter les chevauchements
title = "Visualisation of all samples")
data_3
data_4
