hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
pairs.panels(data_2,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
cor_matrix <- cor(data_3, use = "complete.obs", method = "pearson")
library(ggplot2)
library(reshape2)  # Pour "melt" la matrice en format long
# Convertir la matrice de corrélation en format long
cor_melted <- melt(cor_matrix)
# Créer la heatmap avec ggplot2
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Heatmap de la matrice de corrélation")
# Initialiser une matrice vide pour les résultats de corrélation
cor_matrix_phi <- matrix(NA, ncol = ncol(data_4), nrow = ncol(data_4))
# Remplir la matrice avec les coefficients Phi pour chaque paire de variables
for (i in 1:(ncol(data_4) - 1)) {
for (j in (i + 1):ncol(data_4)) {
cor_matrix_phi[i, j] <- phi(data_4[, i], data_4[, j])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
}
}
data_4
data %>%
select(Panels, Late_mowing,Dead_wood, Cut, Plantation, Elagage, ZNIEFF, Leisure_facilities) ->
data_4
# Initialiser une matrice vide pour les résultats de corrélation
cor_matrix_phi <- matrix(ncol = ncol(data_4), nrow = ncol(data_4))
# Remplir la matrice avec les coefficients Phi pour chaque paire de variables
for (i in 1:(ncol(data_4) - 1)) {
for (j in (i + 1):ncol(data_4)) {
cor_matrix_phi[i, j] <- phi(data_4[, i], data_4[, j])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
}
}
cor_matrix_phi
library(ggplot2)
library(reshape2)
# Remplir la matrice avec les coefficients Phi pour chaque paire de variables
for (i in 1:(ncol(data_bin) - 1)) {
for (j in (i + 1):ncol(data_bin)) {
cor_matrix_phi[i, j] <- phi(data_bin[, i], data_bin[, j])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
}
}
# Initialiser une matrice vide pour les résultats de corrélation
cor_matrix_phi <- matrix(ncol = ncol(data_4), nrow = ncol(data_4))
# Remplir la matrice avec les coefficients Phi pour chaque paire de variables
for (i in 1:(ncol(data_4) - 1)) {
for (j in (i + 1):ncol(data_4)) {
cor_matrix_phi[i, j] <- phi(data_4[, i], data_4[, j])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
}
}
data_4[, i]
data_4[, i]
data_4[, i, drop = TRUE]
# Remplir la matrice avec les coefficients Phi pour chaque paire de variables
for (i in 1:(ncol(data_4) - 1)) {
for (j in (i + 1):ncol(data_4)) {
cor_matrix_phi[i, j] <- phi(data_4[, i, drop = TRUE], data_4[, j, drop = TRUE])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
}
}
table(data_4[, i])
# Convertir les colonnes en 0 et 1 (si nécessaire)
data_4[, i] <- as.numeric(data_4[, i]) - 1
# Vérifier que les colonnes sont des vecteurs
if (is.vector(data_4[, i]) && is.vector(data_4[, j])) {
# Calculer la corrélation Phi
cor_matrix_phi[i, j] <- phi(data_4[, i], data_4[, j])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
} else {
stop("Les données ne sont pas des vecteurs.")
}
# Remplir la matrice avec les coefficients Phi pour chaque paire de variables
for (i in 1:(ncol(data_4) - 1)) {  # Première boucle pour les indices de colonnes
for (j in (i + 1):ncol(data_4)) {  # Deuxième boucle pour les paires (i, j) où j > i
# Utiliser drop = TRUE pour obtenir un vecteur
cor_matrix_phi[i, j] <- phi(data_4[, i, drop = TRUE], data_4[, j, drop = TRUE])  # Calcul de la corrélation Phi
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique : valeur à [j, i] égale à [i, j]
}
}
dim(data_4[, i, drop = TRUE])
length(data_4[, i, drop = TRUE])
# Vérifier les dimensions pour s'assurer qu'il s'agit bien de vecteurs
if(length(data_4[, i, drop = TRUE]) == length(data_4[, j, drop = TRUE])) {
# Calculer la corrélation Phi entre les colonnes i et j
cor_matrix_phi[i, j] <- phi(data_4[, i, drop = TRUE], data_4[, j, drop = TRUE])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
} else {
stop("Les dimensions des colonnes ne sont pas égales.")
}
# Vérifier que les colonnes sont des vecteurs
if (is.vector(data_4[, i]) && is.vector(data_4[, j])) {
# Calculer la corrélation Phi
cor_matrix_phi[i, j] <- phi(data_4[, i], data_4[, j])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
} else {
stop("Les données ne sont pas des vecteurs.")
}
# Vérifier les dimensions pour s'assurer qu'il s'agit bien de vecteurs
if(length(data_4[, i, drop = TRUE]) == length(data_4[, j, drop = TRUE])) {
# Calculer la corrélation Phi entre les colonnes i et j
cor_matrix_phi[i, j] <- phi(data_4[, i, drop = TRUE], data_4[, j, drop = TRUE])
cor_matrix_phi[j, i] <- cor_matrix_phi[i, j]  # Matrice symétrique
} else {
stop("Les dimensions des colonnes ne sont pas égales.")
}
# Standardiser les variables quantitatives (seulement pour les variables quantitatives)
data_quantitative_scaled <- scale(data_3)  # Mise à l'échelle
data_quantitative_scaled
# Concaténer les données binaires et quantitatives standardisées
data_scaled <- cbind(data_quantitative_scaled, data_4)
acp <- PCA(data_scaled, scale. = TRUE)
# Résumé des résultats de l'ACP
summary(acp)
# Affichage des résultats visuels
# Graphique des variances expliquées par chaque composante principale
plot(acp, main = "Analyse en Composantes Principales (ACP)")
# Biplot pour visualiser les individus et les variables dans les nouvelles composantes
biplot(acp, main = "Biplot de l'ACP")
acp
acp <- PCA(data_scaled, scale. = TRUE)
# Affichage des résultats visuels
# Graphique des variances expliquées par chaque composante principale
plot(acp, main = "Analyse en Composantes Principales (ACP)")
acp <- PCA(data_scaled, scale. = TRUE)
acp$svd$U
# variables
acp$svd$V
# Histogramme des valeurs propres
barplot(acp$eig[,1], main="valeurs propres", names.arg=paste("dim", 1:nrow(acp$eig)))
#### Graphiques individuels
plot.PCA (acp, choix="ind", invisible="ind.sup")
plot.PCA (acp, choix="var", invisible="ind.sup")
install.packages("factoextra")
install.packages("factoextra")
require(factoextra)
fviz_cos2(acp, choice = "ind", axe=1:2)
fviz_pca_biplot(acp, col.ind = "cos2", gradient.cols=c("red","yellow","green"),repel = TRUE)
fviz_pca_biplot(acp, col.ind = "cos2", gradient.cols=c("red","yellow","green"),repel = TRUE)
# Calcul de la somme des cos2 des individus : contribution relative pour evaluer la qualite de la projection des individus (ou lignes, "row") sur les axes :
cont=inertia.dudi(acp, row.inertia = TRUE)
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Individus
acp$svd$U
# variables
acp$svd$V
# Histogramme des valeurs propres
barplot(acp$eig[,1], main="valeurs propres", names.arg=paste("dim", 1:nrow(acp$eig)))
# Graphiques individuels
plot.PCA (acp, choix="ind", invisible="ind.sup")
# Contribution des axes (composantes principales)
contribution_axes <- acp_fm$eig
# Contribution des axes (composantes principales)
contribution_axes <- acp$eig
contribution_axes
# Graphique de la variance expliquée par chaque axe
barplot(contribution_axes[, 2], names.arg = 1:nrow(contribution_axes),
main = "Contributions des axes (Variance expliquée)",
xlab = "Axe", ylab = "Variance expliquée (%)",
col = "lightblue")
# Contribution des individus à chaque axe
contribution_individus <- acp_fm$ind$contrib
# Contribution des individus à chaque axe
contribution_individus <- acp$ind$contrib
head(contribution_individus)  # Afficher les premières lignes pour voir la structure
# Graphique des individus avec la contribution à l'axe 1
plot(acp_fm, choix = "ind", main = "Graphique des individus (ACP)")
# Graphique des individus avec la contribution à l'axe 1
plot(acp, choix = "ind", main = "Graphique des individus (ACP)")
# Contribution des variables aux axes
contribution_variables <- acp$var$contrib
head(contribution_variables)  # Afficher les premières lignes pour voir la structure
# Installer le package pheatmap si nécessaire
install.packages("pheatmap")
library(pheatmap)
# Heatmap des contributions des variables
pheatmap(contribution_variables, main = "Heatmap des contributions des variables",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
# Installer et charger le package factoextra
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
# Visualiser la contribution des variables à l'axe 1
fviz_contrib(acp_fm, choice = "var", axes = 1, top = 10,
main = "Contribution des variables à l'axe 1",
fill = "lightblue")
# Visualiser la contribution des variables à l'axe 1
fviz_contrib(acp, choice = "var", axes = 1, top = 10,
main = "Contribution des variables à l'axe 1",
fill = "lightblue")
# Calculer les angles entre les variables sur les deux premiers axes
# Extraire les coordonnées des variables
var_coords <- acp$var$coord
# Calculer l'angle entre deux variables (exemple pour les premières variables)
angle <- acos(sum(var_coords[1,] * var_coords[2,]) /
(sqrt(sum(var_coords[1,]^2)) * sqrt(sum(var_coords[2,]^2)))) * (180 / pi)
angle
# Extraire la qualité de la représentation (cosinus de l'angle)
cos2_individus <- acp$ind$cos2
head(cos2_individus)  # Afficher les premières lignes
# Visualiser la qualité de la représentation des individus sur le premier axe
barplot(cos2_individus[, 1], names.arg = rownames(cos2_individus),
main = "Qualité de la représentation des individus sur l'axe 1",
xlab = "Individus", ylab = "Qualité de la représentation (cos2)",
col = "lightblue", las = 2, cex.names = 0.7)
# Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
library(factoextra)
# Visualiser les individus avec la qualité de la représentation sur l'axe 1
fviz_ind(acp_fm, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
library(factoextra)
# Visualiser les individus avec la qualité de la représentation sur l'axe 1
fviz_ind(acp_fm, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Installer et charger le package factoextra
install.packages("factoextra")
install.packages("factoextra")
library(tidyverse)
data <- read_csv2("Data_flo_pedo_gestion.csv")
data
library(factoextra)
# Visualiser les individus avec la qualité de la représentation sur l'axe 1
fviz_ind(acp_fm, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Trouver les individus mal représentés sur l'axe 1
individus_mal_represents <- which(cos2_individus[, 1] < 0.5)
individus_mal_represents
cos2_individus
individus_mal_represents
# Visualiser les individus avec la qualité de la représentation sur l'axe 1
fviz_ind(acp_fm, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Visualiser les individus avec la qualité de la représentation sur l'axe 1
fviz_ind(acp_fm, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Visualiser les individus avec la qualité de la représentation sur les axes principaux
fviz_pca_ind(acp_fm, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Visualiser les individus avec la qualité de la représentation sur les axes principaux
fviz_pca_ind(acp, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Visualiser la contribution des variables à l'axe 1
fviz_contrib(acp_fm, choice = "var", axes = 1, top = 10,
main = "Contribution des variables à l'axe 1",
fill = "lightblue")
# Visualiser la contribution des variables à l'axe 1
fviz_contrib(acp, choice = "var", axes = 1, top = 10,
main = "Contribution des variables à l'axe 1",
fill = "lightblue")
# Visualiser la qualité de la représentation des variables avec cos2
fviz_cos2(acp, choice = "var", axes = 1:2,
main = "Qualité de la représentation des variables (Cos2)")
data_scaled
data_3
data %>%
select(-Sample,-Panels, -Late_mowing,-Dead_wood, -Cut, -Plantation, -Elagage, -ZNIEFF, -Leisure_facilities)->
data_3
# Standardiser les variables quantitatives (seulement pour les variables quantitatives)
data_quantitative_scaled <- scale(data_3)  # Mise à l'échelle
# Concaténer les données binaires et quantitatives standardisées
data_scaled <- cbind(data_quantitative_scaled, data_4)
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Effectuer l'ACP
library(FactoMineR)
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Individus
acp$svd$U
# variables
acp$svd$V
# Histogramme des valeurs propres
barplot(acp$eig[,1], main="valeurs propres", names.arg=paste("dim", 1:nrow(acp$eig)))
# Graphiques individuels
plot.PCA (acp, choix="ind", invisible="ind.sup")
plot.PCA (acp, choix="var", invisible="ind.sup")
# Contribution des axes (composantes principales)
contribution_axes <- acp$eig
contribution_axes
# Graphique de la variance expliquée par chaque axe
barplot(contribution_axes[, 2], names.arg = 1:nrow(contribution_axes),
main = "Contributions des axes (Variance expliquée)",
xlab = "Axe", ylab = "Variance expliquée (%)",
col = "lightblue")
# Contribution des individus à chaque axe
contribution_individus <- acp$ind$contrib
head(contribution_individus)  # Afficher les premières lignes pour voir la structure
# Graphique des individus avec la contribution à l'axe 1
plot(acp, choix = "ind", main = "Graphique des individus (ACP)")
# Contribution des variables aux axes
contribution_variables <- acp$var$contrib
head(contribution_variables)  # Afficher les premières lignes pour voir la structure
# Heatmap des contributions des variables
pheatmap(contribution_variables, main = "Heatmap des contributions des variables",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
library(pheatmap)
# Heatmap des contributions des variables
pheatmap(contribution_variables, main = "Heatmap des contributions des variables",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
# Extraire la qualité de la représentation (cosinus de l'angle)
cos2_individus <- acp$ind$cos2
head(cos2_individus)  # Afficher les premières lignes
# Visualiser la qualité de la représentation des individus sur le premier axe
barplot(cos2_individus[, 1], names.arg = rownames(cos2_individus),
main = "Qualité de la représentation des individus sur l'axe 1",
xlab = "Individus", ylab = "Qualité de la représentation (cos2)",
col = "lightblue", las = 2, cex.names = 0.7)
# Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
library(factoextra)
# Visualiser les individus avec la qualité de la représentation sur les axes principaux
fviz_pca_ind(acp, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Visualiser la qualité de la représentation des variables avec cos2
fviz_cos2(acp, choice = "var", axes = 1:2,
main = "Qualité de la représentation des variables (Cos2)")
# Visualiser la qualité de la représentation des variables avec Cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
# Résumé des résultats de l'ACP
summary(acp)
i
# Affichage des résultats visuels
# Graphique des variances expliquées par chaque composante principale
plot(acp, main = "Analyse en Composantes Principales (ACP)")
# Biplot pour visualiser les individus et les variables dans les nouvelles composantes
biplot(acp, main = "Biplot de l'ACP")
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp, label = data$ID,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "ACP avec noms des individus")
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp, label = data$Sample,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "ACP avec noms des individus")
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp, label = data$Sample,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "Visualisation of all samples")
data$Sample
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp,
label = data$Sample,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "Visualisation of all samples")
# Histogramme des valeurs propres
barplot(acp$eig[,1], main="valeurs propres", names.arg=paste("dim", 1:nrow(acp$eig)))
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Contribution des axes (composantes principales)
contribution_axes <- acp$eig
contribution_axes
# Graphiques individuels
plot.PCA (acp, choix="ind", invisible="ind.sup")
plot.PCA (acp, choix="var", invisible="ind.sup")
# Contribution des individus à chaque axe
contribution_individus <- acp$ind$contrib
head(contribution_individus)  # Afficher les premières lignes pour voir la structure
# Graphique des individus avec la contribution à l'axe 1
plot(acp, choix = "ind", main = "Graphique des individus (ACP)")
# Contribution des variables aux axes
contribution_variables <- acp$var$contrib
head(contribution_variables)  # Afficher les premières lignes pour voir la structure
acp$var
contribution_variables
# Visualiser la corrélation des variables avec les axes de l'ACP
fviz_pca_var(acp,
col.var = "blue",           # Couleur des variables
axes = c(1, 2),             # Visualisation des axes 1 et 2
labelsize = 4,              # Taille des labels des variables
title = "Corrélation des variables avec les axes de l'ACP")
# Visualiser la qualité de la représentation des variables (Cos2)
fviz_cos2(acp, choice = "var", axes = 1:2,
main = "Qualité de la représentation des variables (Cos2)")
# a) Accéder aux corrélations des variables avec les axes
acp$var$cor   # Matrice des corrélations entre les variables et les axes
# b) Accéder à la matrice des cos2 (qualité de la représentation des variables)
acp$var$cos2  # Qualité de la représentation des variables par les axes
# a) Accéder aux corrélations des variables avec les axes
acp$var$cor   # Matrice des corrélations entre les variables et les axes
# Individus
acp$svd$U
contribution_axes
## Graphique de la variance expliquée par chaque axe
barplot(contribution_axes[, 2], names.arg = 1:nrow(contribution_axes),
main = "Contributions des axes (Variance expliquée)",
xlab = "Axe", ylab = "Variance expliquée (%)",
col = "lightblue")
# Les individus
## Contribution des individus à chaque axe
contribution_individus <- acp$ind$contrib
contribution_individus
contribution_variables
pheatmap(contribution_variables, main = "Heatmap des contributions des variables",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
## Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
fviz_pca_ind(acp, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
# Visualiser la qualité de la représentation des variables avec Cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
## Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
# Visualiser la qualité de la représentation des variables avec Cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp,
label = data$Sample,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "Visualisation of all samples")
contribution_individus
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp,
label = data$Sample,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "Visualisation of all samples")
data$Sample
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp,
label = data$Sample,  # Utiliser la colonne "ID" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "Visualisation of all samples")
acp
acp <- PCA(data_scaled, ncp = 4, scale. = TRUE)
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp,
label = data$Sample,  # Utiliser la colonne "Samples" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = TRUE,            # Eviter les chevauchements
title = "Visualisation of all samples")
# Visualiser l'ACP avec les noms des points issus de la colonne "ID"
fviz_pca_ind(acp,
label = data$Sample,  # Utiliser la colonne "Samples" pour les labels
geom.ind = "point",     # Points pour les individus
col.ind = "blue",        # Couleur des points
labelsize = 3,           # Taille des labels
repel = F,            # Eviter les chevauchements
title = "Visualisation of all samples")
# Convertir les étiquettes en caractères si c'est un facteur
fviz_pca_ind(acp,
label = as.character(data$Sample),  # Convertir en caractères
geom.ind = "point",
col.ind = "blue",
labelsize = 3,
repel = FALSE,
title = "Visualisation of all samples")
## Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
## Visualiser la qualité de la représentation des variables avec Cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
## Heatmap des cosinus des angles (qualité de la représentation)
pheatmap(cos2_individus, main = "Heatmap de la qualité de la représentation des individus",
cluster_rows = TRUE, cluster_cols = TRUE, color = colorRampPalette(c("white", "blue"))(50))
fviz_pca_ind(acp, col.ind = "cos2", gradient.cols = c("white", "blue"),
title = "Représentation des individus (qualité)")
## Visualiser la qualité de la représentation des variables avec Cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
## Matrice des corrélations entre les variables et les axes
acp$var$cor
## Cercles des corrélations
plot.PCA (acp, choix="var", invisible="ind.sup")
acp$var$cor
cos2_individus
## Visualiser la qualité de la représentation des variables avec Cos2
fviz_cos2(acp, choice = "var", axes = 1:2) +
ggtitle("Qualité de la représentation des variables (Cos2)")  # Ajouter un titre via ggtitle
## Visualiser la qualité de la représentation des variables avec Cos2
cos2_var <- acp$var$cos2
cos2_var
